##################################################
Revision history for Log::Log4perl
##################################################

TODO:

* I wonder if it might not be a mistake to have the base level be '0', 
  might be safer to make it '1', less chance of those false-but-is-defined errors
  I think that's what log4j uses
* Should we canonicalize on a level is a string and a priority is an int?  
  might make maintenance easier

* test cases should use platform independend directory separator 
  (Mac's pre-OSX ':'?)

Kevin:
DONE need level validation on Logger::level() 
DONE Create new module negotiating between Java-style config files
  and perl-style appenders
* Module for reading XML-style config files
DONE (is gone) redo level_str() hack
DONE (Dispatch singleton) question - are appenders created just once if they're reused in the config file?
* Please use 80 chars max line width

Mike:
DONE Log::Dispatch::Buffer: Delete from MANIFEST
DONE Log::Log4perl->init()
DONE Several appenders in one config line: log4j.rootLogger=debug, stdout, R
DONE Define default if there's no layout:
  http://jakarta.apache.org/log4j/docs/api/org/apache/log4j/SimpleLayout.html
* Log::Dispatch wrapper for perl modules just like JavaMap?
* Tune performance of level() lookups
 (Mike, check out the log4j statement:
 "As a side note, let me mention that in log4j child loggers link only to their 
  existing ancestors. In particular, the logger named com.foo.Bar is linked 
  directly to the root logger, thereby circumventing the unused com or com.foo
  loggers. This significantly increases performance and reduces log4j's memory 
  footprint. "
* %% bug in Layout.pm
* Layout.pm: 'd' (partially implemented), 't', 'x', 'X'
* Documentation of Log::Log4perl::Logger and Log::Log4perl::Config
* Signal to re-read the conf file.
* Additivity flag -- set/get as API and in cfg file
* 80 chars width
* README tests (Pod::Tests or something)
* Thread safety

##################################################

0.13 07/09/2002
* in the config files, 'debug' is not a level, 'DEBUG' is
* expanded the layouts so that we can add subclassess, added SimpleLayout, 
  note that api usage changes 
  -$logger->layout('buf',"The message is here: %m");
  +$logger->layout(new Log::Log4perl::Layout::PatternLayout('buf',"The message is here: %m"));
* did benchmarks, see doc/benchmark*, t/013Bench.t
* further tweaked errors for bad configuration, added a test for those

0.12 07/08/2002
    * Log::Log4perl::Logger->get_logger now accessible via 
      Log::Log4perl->get_logger()
    * Log::Log4perl::Config->init now accessible via 
      Log::Log4perl->init()
    * Adapted test cases to new shortcuts
    * Constrained some files to 80 chars width
    * Added test case t/009Deuce.t for two appenders in one category
      via the config file
    * Changed default layout in case there's none defined (SimpleLayout)
    * Implemented dictatory date format for %d: yyyy/mm/dd hh:mm:ss

0.11 07/07/2002
    * added documentation to Log/Log4perl.pm
    * added is_debug/is_error/is_info etc. functions to Logger.pm,
      test cases to t/002Logger.t

0.10 07/05/2002
    * %p should return level name of the calling function, so 
      $logger->warn('bad thing!!') should print 'WARN - bad thing'
      even if the category is set to debug, so took level_str out of
      Logger.pm (kg)

0.09 07/03/2002
    * %p should return level name, not number, adding level_str to Logger.pm (kg)
    * Level.pm - discriminating: priorities are 1-4, levels are 'info','debug',etc (kg)

0.08  07/03/2002
    * Non-root loggers are working now off the config file

0.07  07/02/2002
    * Updated documentation
    * removed "diagnostics"

0.06  07/01/2002
    * Bug discovered by Kevin Goess <cpan@goess.org>, revealed
      in 004-Config.t: Wrong layout used if Appender is inherited.
      Fixed.
    * Changed Log::Dispatch::Buffer to keep track of the
      object population -- so we can easily reference them
      in the Log::Log4perl test cases. Got rid of get_buffer().
    * Added a reset() method to Log::Log4perl and Log::Log4perl::Logger
      for easier testing. It resets all persistent loggers to 
      the inital state.
    * Added documentation

0.05  06/30/2002
    * Fixed bug with mapped priorities between java/Log::Dispatch
    * Java/Perl integration with conf file

0.04  06/30/2002
    * Layout tests
    * %r to layout
    * Added lib4j configuration file stuff and tests

0.03  06/30/2002
    * Layout
    * Curly braces in Layout first ops

0.02  06/30/2002
    * Created Logger and test cases

0.01  06/22/2002
    * Where it all began
